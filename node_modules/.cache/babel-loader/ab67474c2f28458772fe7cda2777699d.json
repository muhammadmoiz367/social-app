{"ast":null,"code":"import firebase, { db } from '../firebase/firebase';\nimport { GET_POSTS, CREATE_POST } from '../actionConstants';\nimport 'firebase/firestore';\n\nfunction getPosts(data) {\n  return {\n    type: GET_POSTS,\n    data\n  };\n}\n\nfunction createNewPost(post) {\n  return {\n    type: CREATE_POST,\n    data: post\n  };\n}\n\nexport const handleInitialData = () => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirebase().firestore();\n    let id;\n    let posts = {};\n    db.collection(\"posts\").orderBy('createdAt', 'desc').get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        id = doc.id;\n        posts[id] = doc.data();\n      });\n      dispatch(getPosts(posts));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const createPost = (newPost, history) => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    db.collection(\"posts\").add(newPost).then(doc => {\n      console.log('document written successfully with id: ', doc.id);\n      db.doc(`/posts/${doc.id}`).get().then(doc => {\n        let newPostData = {};\n        newPostData = doc.data();\n        newPostData.id = doc.id;\n        dispatch(createNewPost(newPostData));\n        history.push('/');\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n};\nexport const getSpecificPost = id => {\n  return (dispatch, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    let postData = {};\n    db.doc(`/posts/${id}`).get().then(doc => {\n      if (!doc.exists) {\n        console.log('Document not existed');\n      }\n\n      postData = doc.data();\n      postData.postId = doc.id;\n      return db.collection('comments').orderBy('createdAt', 'desc').where('postId', '==', req.params.postId).get();\n    }).then(data => {\n      postData.comments = [];\n      data.forEach(doc => {\n        postData.comments.push(doc.data());\n      });\n      return db.collection('likes').where('postId', '==', req.params.postId).get();\n    }).then(data => {\n      postData.likes = [];\n      data.forEach(doc => {\n        postData.likes.push(doc.data());\n      });\n      return res.json(postData);\n    }).catch(err => {\n      console.error(err);\n      res.status(500).json({\n        error: err.message\n      });\n    });\n  };\n};","map":{"version":3,"sources":["E:/react/react-redux/social-app/src/actions/dataActions.js"],"names":["firebase","db","GET_POSTS","CREATE_POST","getPosts","data","type","createNewPost","post","handleInitialData","dispatch","getState","getFirebase","getFirestore","firestore","id","posts","collection","orderBy","get","then","querySnapshot","forEach","doc","catch","err","console","log","createPost","newPost","history","add","newPostData","push","getSpecificPost","postData","exists","postId","where","req","params","comments","likes","res","json","error","status","message"],"mappings":"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","sourcesContent":["\r\nimport firebase, { db } from '../firebase/firebase';\r\nimport {GET_POSTS, CREATE_POST} from '../actionConstants'\r\nimport 'firebase/firestore';\r\n\r\nfunction getPosts(data){\r\n  return{\r\n    type: GET_POSTS,\r\n    data\r\n  }\r\n}\r\nfunction createNewPost(post){\r\n  return{\r\n    type: CREATE_POST,\r\n    data: post\r\n  }\r\n}\r\n\r\nexport const handleInitialData=()=>{\r\n  return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n    const firebase=getFirebase();\r\n    const firestore=getFirebase().firestore()\r\n    let id;\r\n    let posts={}\r\n    db.collection(\"posts\").orderBy('createdAt', 'desc').get()\r\n    .then((querySnapshot) => {\r\n      querySnapshot.forEach((doc) =>{\r\n      id=doc.id;\r\n      posts[id]=doc.data();\r\n       });\r\n      dispatch(getPosts(posts))\r\n    })\r\n    .catch(err=>{\r\n      console.log(err)\r\n    })\r\n  }\r\n}\r\n\r\nexport const createPost=(newPost, history)=>{\r\n  return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n    const firebase=getFirebase();\r\n    db.collection(\"posts\").add(newPost)\r\n    .then(doc=>{\r\n      console.log('document written successfully with id: ',doc.id )\r\n      db.doc(`/posts/${doc.id}`).get()\r\n      .then(doc=>{\r\n        let newPostData={}\r\n        newPostData=doc.data()\r\n        newPostData.id=doc.id\r\n        dispatch(createNewPost(newPostData))\r\n        history.push('/')\r\n      })\r\n      .catch(err=>{\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport const getSpecificPost=(id)=>{\r\n  return (dispatch, {getFirebase, getFirestore})=>{\r\n    const firebase=getFirebase()\r\n    let postData = {};\r\n    db.doc(`/posts/${id}`).get()\r\n    .then((doc) => {\r\n    if (!doc.exists) {\r\n        console.log('Document not existed')\r\n    }\r\n    postData = doc.data();\r\n    postData.postId = doc.id;\r\n    return db.collection('comments').orderBy('createdAt', 'desc').where('postId', '==', req.params.postId).get();\r\n    })\r\n    .then((data) => {\r\n        postData.comments = [];\r\n        data.forEach((doc) => {\r\n            postData.comments.push(doc.data());\r\n        });\r\n        return db.collection('likes').where('postId', '==', req.params.postId).get();\r\n    })\r\n    .then((data) => {\r\n        postData.likes = [];\r\n        data.forEach((doc) => {\r\n            postData.likes.push(doc.data());\r\n        });\r\n        return res.json(postData);\r\n    })\r\n    .catch((err) => {\r\n        console.error(err);\r\n        res.status(500).json({ error: err.message });\r\n    });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}