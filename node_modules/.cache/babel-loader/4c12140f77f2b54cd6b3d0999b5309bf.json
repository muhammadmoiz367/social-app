{"ast":null,"code":"import firebase, { db } from '../firebase/firebase';\nimport { signUpValidate, loginValidate } from '../utils/validators';\nimport { LOGIN_SUCCESS, LOGIN_ERROR, SIGNOUT_SUCCESS, SIGNOUT_ERROR, SIGNUP_SUCCESS, SIGNUP_ERROR } from '../actionConstants';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nfunction loginSuccess() {\n  return {\n    type: LOGIN_SUCCESS\n  };\n}\n\nfunction loginError(err) {\n  return {\n    type: LOGIN_ERROR,\n    err\n  };\n}\n\nfunction signoutSuccess() {\n  return {\n    type: SIGNOUT_SUCCESS\n  };\n}\n\nfunction signoutError(err) {\n  return {\n    type: SIGNOUT_ERROR,\n    err\n  };\n}\n\nfunction signupSuccess() {\n  return {\n    type: SIGNUP_SUCCESS\n  };\n}\n\nfunction signupError(err) {\n  return {\n    type: SIGNUP_ERROR,\n    err\n  };\n}\n\nexport const signIn = credentials => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(res => {\n      console.log(res);\n      dispatch(loginSuccess());\n      db.collection(\"users\").where('uid', '==', res.user.uid).get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          console.log(doc.data());\n        });\n      });\n    }).catch(err => {\n      console.log(err);\n      dispatch(loginError(err));\n    });\n  };\n};\n/*export const signOut=()=>{\r\n    return (dispatch,getState,{getFirebase})=>{\r\n        const firebase=getFirebase();\r\n        firebase.auth().signOut()\r\n        .then(()=>{\r\n            dispatch(setProgressBar('OPEN'))\r\n        }).then(()=>{\r\n            setTimeout(()=>{\r\n                dispatch(setProgressBar('CLOSE'))\r\n            },2000)\r\n        })\r\n        .catch((err)=>{\r\n            dispatch(signoutError(err))\r\n        })\r\n    }\r\n}\r\n*/\n\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirebase().firestore();\n    const {\n      isValid,\n      errors\n    } = signUpValidate(newUser);\n\n    if (!isValid) {}\n\n    firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password, newUser.confirmPassword, newUser.userHandle).then(response => {\n      return db.collection('users').doc(response.user.uid).set({\n        fisrtName: newUser.fisrtName,\n        name: newUser.fisrtName + newUser.lastName,\n        initials: newUser.fisrtName[0] + newUser.lastName[0],\n        tweets: []\n      }).then(() => {\n        dispatch(signupSuccess());\n      }).catch(err => {\n        dispatch(signupError(err));\n      });\n    });\n  };\n};","map":{"version":3,"sources":["E:/react/react-redux/social-app/src/actions/authUserActions.js"],"names":["firebase","db","signUpValidate","loginValidate","LOGIN_SUCCESS","LOGIN_ERROR","SIGNOUT_SUCCESS","SIGNOUT_ERROR","SIGNUP_SUCCESS","SIGNUP_ERROR","loginSuccess","type","loginError","err","signoutSuccess","signoutError","signupSuccess","signupError","signIn","credentials","dispatch","getState","getFirebase","getFirestore","firestore","auth","signInWithEmailAndPassword","email","password","then","res","console","log","collection","where","user","uid","get","querySnapshot","forEach","doc","data","catch","signUp","newUser","isValid","errors","createUserWithEmailAndPassword","confirmPassword","userHandle","response","set","fisrtName","name","lastName","initials","tweets"],"mappings":"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","sourcesContent":["import firebase, { db } from '../firebase/firebase';\r\nimport {signUpValidate, loginValidate} from '../utils/validators'\r\nimport {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_ERROR,\r\n    SIGNOUT_SUCCESS,\r\n    SIGNOUT_ERROR,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_ERROR\r\n} from '../actionConstants';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nfunction loginSuccess(){\r\n    return{\r\n        type:LOGIN_SUCCESS\r\n    }\r\n}\r\nfunction loginError(err){\r\n    return{\r\n        type:LOGIN_ERROR,\r\n        err\r\n    }\r\n}\r\nfunction signoutSuccess(){\r\n    return{\r\n        type:SIGNOUT_SUCCESS\r\n    }\r\n}\r\nfunction signoutError(err){\r\n    return{\r\n        type:SIGNOUT_ERROR,\r\n        err\r\n    }\r\n}\r\nfunction signupSuccess(){\r\n    return{\r\n        type:SIGNUP_SUCCESS\r\n    }\r\n}\r\nfunction signupError(err){\r\n    return{\r\n        type:SIGNUP_ERROR,\r\n        err\r\n    }\r\n}\r\n\r\n\r\nexport const signIn=(credentials)=>{\r\n    return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n        const firebase=getFirebase();\r\n        const firestore=getFirestore()\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        )\r\n        .then((res)=>{\r\n            console.log(res)\r\n            dispatch(loginSuccess())\r\n\r\n            db.collection(\"users\").where('uid','==',res.user.uid).get()\r\n            .then((querySnapshot) => {\r\n                querySnapshot.forEach((doc) =>{\r\n                    console.log(doc.data());\r\n                });\r\n            });\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n            dispatch(loginError(err))\r\n        })\r\n    }\r\n}\r\n\r\n/*export const signOut=()=>{\r\n    return (dispatch,getState,{getFirebase})=>{\r\n        const firebase=getFirebase();\r\n        firebase.auth().signOut()\r\n        .then(()=>{\r\n            dispatch(setProgressBar('OPEN'))\r\n        }).then(()=>{\r\n            setTimeout(()=>{\r\n                dispatch(setProgressBar('CLOSE'))\r\n            },2000)\r\n        })\r\n        .catch((err)=>{\r\n            dispatch(signoutError(err))\r\n        })\r\n    }\r\n}\r\n*/\r\n\r\nexport const signUp=(newUser)=>{\r\n    return (dispatch,getState,{getFirebase, getFirestore})=>{\r\n        const firebase=getFirebase();\r\n        const firestore=getFirebase().firestore();\r\n        const {isValid, errors}=signUpValidate(newUser)\r\n        if(!isValid){\r\n            \r\n        }\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password,\r\n            newUser.confirmPassword,\r\n            newUser.userHandle\r\n        ).then((response)=>{\r\n            return db.collection('users').doc(response.user.uid).set({\r\n                fisrtName:newUser.fisrtName,\r\n                name:newUser.fisrtName+newUser.lastName,\r\n                initials:newUser.fisrtName[0]+newUser.lastName[0],\r\n                tweets:[]\r\n            }).then(()=>{\r\n                dispatch(signupSuccess())\r\n            }).catch(err =>{\r\n                dispatch(signupError(err))\r\n            })\r\n        })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}