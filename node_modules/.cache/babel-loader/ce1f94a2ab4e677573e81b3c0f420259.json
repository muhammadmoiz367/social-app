{"ast":null,"code":"import firebase, { db } from '../firebase/firebase';\nimport { GET_POSTS, CREATE_POST, GET_SPECIFIC_POST, CREATE_NEW_COMMENT, LIKE_POST, UNLIKE_POST, LOADING_DATA } from '../actionConstants';\nimport 'firebase/firestore';\nimport post from '../components/post';\n\nfunction getPosts(data) {\n  return {\n    type: GET_POSTS,\n    data\n  };\n}\n\nfunction createNewPost(post) {\n  return {\n    type: CREATE_POST,\n    data: post\n  };\n}\n\nfunction getSpecificPostData(data) {\n  return {\n    type: GET_SPECIFIC_POST,\n    data\n  };\n}\n\nfunction createNewComment(comment) {\n  return {\n    type: CREATE_NEW_COMMENT,\n    data: comment\n  };\n}\n\nfunction likePostAction(data) {\n  return {\n    type: LIKE_POST,\n    data\n  };\n}\n\nfunction unlikePostAction(data) {\n  return {\n    type: UNLIKE_POST,\n    data\n  };\n}\n\nexport const handleInitialData = () => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirebase().firestore();\n    let id;\n    db.collection(\"posts\").orderBy('createdAt', 'desc').get().then(querySnapshot => {\n      let posts = [];\n      querySnapshot.forEach(doc => {\n        posts.push({\n          postId: doc.id,\n          body: doc.data().body,\n          userHandle: doc.data().userHandle,\n          createdAt: doc.data().createdAt,\n          userImage: doc.data().userImage,\n          likeCount: doc.data().likeCount,\n          commentCount: doc.data().commentCount\n        });\n      });\n      dispatch({\n        type: LOADING_DATA\n      });\n      dispatch(getPosts(posts));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //create post\n\nexport const createPost = (newPost, history) => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    db.collection(\"posts\").add(newPost).then(doc => {\n      console.log('document written successfully with id: ', doc.id);\n      db.doc(`/posts/${doc.id}`).get().then(doc => {\n        let newPostData = {};\n        newPostData = doc.data();\n        newPostData.id = doc.id;\n        dispatch(createNewPost(newPostData));\n        history.push('/');\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n}; //ge specific post\n\nexport const getSpecificPost = id => {\n  return (dispatch, {\n    getFirebase,\n    getFirestore\n  }) => {\n    let postData = {};\n    db.doc(`/posts/${id}`).get().then(doc => {\n      if (!doc.exists) {\n        console.log('Document not existed');\n      }\n\n      postData = doc.data();\n      postData.postId = doc.id;\n      return db.collection('comments').orderBy('createdAt', 'desc').where('postId', '==', id).get();\n    }).then(data => {\n      postData.comments = [];\n      data.forEach(doc => {\n        postData.comments.push(doc.data());\n      });\n      return db.collection('likes').where('postId', '==', id).get();\n    }).then(data => {\n      postData.likes = [];\n      data.forEach(doc => {\n        postData.likes.push(doc.data());\n      });\n      dispatch(getSpecificPostData(postData));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //comment on post\n\nexport const commentOnPost = (newComment, postId) => {\n  return dispatch => {\n    db.doc(`/posts/${postId}`).get().then(doc => {\n      if (!doc.exists) {\n        console.log('Post not found');\n      }\n\n      return doc.ref.update({\n        commentCount: doc.data().commentCount + 1\n      });\n    }).then(() => {\n      return db.collection('comments').add(newComment);\n    }).then(doc => {\n      console.log('new comment added with id: ', doc.id);\n      db.doc(`/comments/${doc.id}`).get();\n    }).then(doc => {\n      dispatch(createNewComment(doc.data()));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //like on post\n\nexport const likePost = (postId, handle) => {\n  return dispatch => {\n    const likeDocument = db.collection('likes').where('userHandle', '==', handle).where('postId', '==', postId).limit(1);\n    const postDocument = db.doc(`/posts/${postId}`);\n    let postData;\n    postDocument.get().then(doc => {\n      if (doc.exists) {\n        postData = doc.data();\n        postData.postId = doc.id;\n        return likeDocument.get();\n      } else {\n        console.log('post not found');\n      }\n    }).then(data => {\n      if (data.empty) {\n        return db.collection('likes').add({\n          postId: postId,\n          userHandle: handle\n        }).then(() => {\n          postData.likeCount++;\n          return postDocument.update({\n            likeCount: postData.likeCount\n          });\n        }).then(() => {\n          dispatch(likePostAction(postData));\n        });\n      } else {\n        console.log('Post already liked');\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //unlike post\n\nexport const unlikePost = (postId, handle) => {\n  return dispatch => {\n    const likeDocument = db.collection('likes').where('userHandle', '==', handle).where('postId', '==', postId).limit(1);\n    const postDocument = db.doc(`/posts/${postId}`);\n    let postData;\n    postDocument.get().then(doc => {\n      if (doc.exists) {\n        postData = doc.data();\n        postData.postId = doc.id;\n        return likeDocument.get();\n      } else {\n        console.log('post not found');\n      }\n    }).then(data => {\n      if (data.empty) {\n        console.log('post not liked');\n      } else {\n        return db.doc(`/likes/${data.docs[0].id}`).delete().then(() => {\n          postData.likeCount--;\n          return postDocument.update({\n            likeCount: postData.likeCount\n          });\n        }).then(() => {\n          dispatch(unlikePostAction(postData));\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["F:/react/react-redux/social-app/src/actions/dataActions.js"],"names":["firebase","db","GET_POSTS","CREATE_POST","GET_SPECIFIC_POST","CREATE_NEW_COMMENT","LIKE_POST","UNLIKE_POST","LOADING_DATA","post","getPosts","data","type","createNewPost","getSpecificPostData","createNewComment","comment","likePostAction","unlikePostAction","handleInitialData","dispatch","getState","getFirebase","getFirestore","firestore","id","collection","orderBy","get","then","querySnapshot","posts","forEach","doc","push","postId","body","userHandle","createdAt","userImage","likeCount","commentCount","catch","err","console","log","createPost","newPost","history","add","newPostData","getSpecificPost","postData","exists","where","comments","likes","commentOnPost","newComment","ref","update","likePost","handle","likeDocument","limit","postDocument","empty","unlikePost","docs","delete"],"mappings":"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","sourcesContent":["\r\nimport firebase, { db } from '../firebase/firebase';\r\nimport {GET_POSTS, CREATE_POST, GET_SPECIFIC_POST, CREATE_NEW_COMMENT, LIKE_POST, UNLIKE_POST, LOADING_DATA} from '../actionConstants'\r\nimport 'firebase/firestore';\r\nimport post from '../components/post';\r\n\r\nfunction getPosts(data){\r\n  return{\r\n    type: GET_POSTS,\r\n    data\r\n  }\r\n}\r\nfunction createNewPost(post){\r\n  return{\r\n    type: CREATE_POST,\r\n    data: post\r\n  }\r\n}\r\nfunction getSpecificPostData(data){\r\n  return{\r\n    type: GET_SPECIFIC_POST,\r\n    data\r\n  }\r\n}\r\nfunction createNewComment(comment){\r\n  return{\r\n    type: CREATE_NEW_COMMENT,\r\n    data: comment\r\n  }\r\n}\r\nfunction likePostAction(data){\r\n  return{\r\n    type: LIKE_POST,\r\n    data\r\n  }\r\n}\r\nfunction unlikePostAction(data){\r\n  return{\r\n    type: UNLIKE_POST,\r\n    data\r\n  }\r\n}\r\nexport const handleInitialData=()=>{\r\n  return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n    const firebase=getFirebase();\r\n    const firestore=getFirebase().firestore()\r\n    let id;\r\n    db.collection(\"posts\").orderBy('createdAt', 'desc').get()\r\n    .then((querySnapshot) => {\r\n      let posts=[]\r\n      querySnapshot.forEach((doc) =>{\r\n        posts.push({\r\n          postId:doc.id,\r\n          body:doc.data().body,\r\n          userHandle:doc.data().userHandle,\r\n          createdAt:doc.data().createdAt,\r\n          userImage: doc.data().userImage,\r\n          likeCount:doc.data().likeCount,\r\n          commentCount: doc.data().commentCount\r\n          })\r\n       });\r\n      dispatch({type: LOADING_DATA}) \r\n      dispatch(getPosts(posts))\r\n    })\r\n    .catch(err=>{\r\n      console.log(err)\r\n    })\r\n  }\r\n}\r\n//create post\r\nexport const createPost=(newPost, history)=>{\r\n  return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n    db.collection(\"posts\").add(newPost)\r\n    .then(doc=>{\r\n      console.log('document written successfully with id: ',doc.id )\r\n      db.doc(`/posts/${doc.id}`).get()\r\n      .then(doc=>{\r\n        let newPostData={}\r\n        newPostData=doc.data()\r\n        newPostData.id=doc.id\r\n        dispatch(createNewPost(newPostData))\r\n        history.push('/')\r\n      })\r\n      .catch(err=>{\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n}\r\n//ge specific post\r\nexport const getSpecificPost=(id)=>{\r\n  return (dispatch, {getFirebase, getFirestore})=>{\r\n    let postData = {};\r\n    db.doc(`/posts/${id}`).get()\r\n    .then((doc) => {\r\n    if (!doc.exists) {\r\n        console.log('Document not existed')\r\n    }\r\n    postData = doc.data();\r\n    postData.postId = doc.id;\r\n    return db.collection('comments').orderBy('createdAt', 'desc').where('postId', '==', id).get();\r\n    })\r\n    .then((data) => {\r\n        postData.comments = [];\r\n        data.forEach((doc) => {\r\n            postData.comments.push(doc.data());\r\n        });\r\n        return db.collection('likes').where('postId', '==', id).get();\r\n    })\r\n    .then((data) => {\r\n        postData.likes = [];\r\n        data.forEach((doc) => {\r\n            postData.likes.push(doc.data());\r\n        });\r\n        dispatch(getSpecificPostData(postData))\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });\r\n  }\r\n}\r\n//comment on post\r\nexport const commentOnPost=(newComment, postId)=>{\r\n  return (dispatch)=>{\r\n    db.doc(`/posts/${postId}`).get()\r\n    .then((doc)=>{\r\n      if(!doc.exists){\r\n          console.log('Post not found');\r\n      }\r\n      return doc.ref.update({ commentCount: doc.data().commentCount+1});\r\n    })\r\n    .then(()=>{\r\n      return db.collection('comments').add(newComment);\r\n    })\r\n    .then((doc)=>{\r\n      console.log('new comment added with id: ', doc.id)\r\n      db.doc(`/comments/${doc.id}`).get()\r\n    })\r\n    .then(doc=>{\r\n      dispatch(createNewComment(doc.data()))\r\n    })\r\n    .catch((err)=>{\r\n      console.log(err);\r\n    })\r\n  }\r\n}\r\n//like on post\r\nexport const likePost = (postId, handle) => {\r\n  return (dispatch)=>{\r\n    const likeDocument = db.collection('likes').where('userHandle', '==', handle).where('postId', '==', postId).limit(1);\r\n    const postDocument = db.doc(`/posts/${postId}`);\r\n    let postData;\r\n\r\n    postDocument.get()\r\n    .then((doc) => {\r\n        if (doc.exists) {\r\n            postData = doc.data();\r\n            postData.postId = doc.id;\r\n            return likeDocument.get();\r\n        } else {\r\n            console.log('post not found');\r\n        }\r\n    })\r\n    .then((data) => {\r\n        if (data.empty) {\r\n            return db.collection('likes').add({\r\n                postId: postId,\r\n                userHandle: handle\r\n            })\r\n            .then(() => {\r\n                postData.likeCount++;\r\n                return postDocument.update({ likeCount: postData.likeCount });\r\n            })\r\n            .then(() => {\r\n                dispatch(likePostAction(postData))\r\n            });\r\n        } else {\r\n            console.log('Post already liked')\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });\r\n  }\r\n};\r\n//unlike post\r\nexport const unlikePost = (postId, handle) => {\r\n  return (dispatch)=>{\r\n    const likeDocument = db.collection('likes').where('userHandle', '==', handle).where('postId', '==', postId).limit(1);\r\n    const postDocument = db.doc(`/posts/${postId}`);\r\n    let postData;\r\n\r\n    postDocument.get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          postData = doc.data();\r\n          postData.postId = doc.id;\r\n          return likeDocument.get();\r\n        } else {\r\n            console.log('post not found');\r\n        }\r\n      })\r\n      .then((data) => {\r\n        if (data.empty) {\r\n          console.log('post not liked');\r\n        } else {\r\n          return db.doc(`/likes/${data.docs[0].id}`).delete()\r\n            .then(() => {\r\n              postData.likeCount--;\r\n              return postDocument.update({ likeCount: postData.likeCount });\r\n            })\r\n            .then(() => {\r\n              dispatch(unlikePostAction(postData))\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}