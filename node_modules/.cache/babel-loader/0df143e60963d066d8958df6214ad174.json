{"ast":null,"code":"import firebase, { db } from '../firebase/firebase';\nimport { GET_POSTS, CREATE_POST, GET_SPECIFIC_POST, CREATE_NEW_COMMENT, LIKE_POST, UNLIKE_POST } from '../actionConstants';\nimport 'firebase/firestore';\n\nfunction getPosts(data) {\n  return {\n    type: GET_POSTS,\n    data\n  };\n}\n\nfunction createNewPost(post) {\n  return {\n    type: CREATE_POST,\n    data: post\n  };\n}\n\nfunction getSpecificPostData(data) {\n  return {\n    type: GET_SPECIFIC_POST,\n    data\n  };\n}\n\nfunction createNewComment(comment) {\n  return {\n    type: CREATE_NEW_COMMENT,\n    data: comment\n  };\n}\n\nfunction likePostAction(data) {\n  return {\n    type: LIKE_POST,\n    data\n  };\n}\n\nfunction unlikePostAction(data) {\n  return {\n    type: UNLIKE_POST,\n    data\n  };\n}\n\nexport const handleInitialData = () => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirebase().firestore();\n    let id;\n    let posts = {};\n    db.collection(\"posts\").orderBy('createdAt', 'desc').get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        id = doc.id;\n        posts[id] = doc.data();\n      });\n      dispatch({\n        type: LOAD\n      });\n      dispatch(getPosts(posts));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //create post\n\nexport const createPost = (newPost, history) => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    db.collection(\"posts\").add(newPost).then(doc => {\n      console.log('document written successfully with id: ', doc.id);\n      db.doc(`/posts/${doc.id}`).get().then(doc => {\n        let newPostData = {};\n        newPostData = doc.data();\n        newPostData.id = doc.id;\n        dispatch(createNewPost(newPostData));\n        history.push('/');\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n}; //ge specific post\n\nexport const getSpecificPost = id => {\n  return (dispatch, {\n    getFirebase,\n    getFirestore\n  }) => {\n    let postData = {};\n    db.doc(`/posts/${id}`).get().then(doc => {\n      if (!doc.exists) {\n        console.log('Document not existed');\n      }\n\n      postData = doc.data();\n      postData.postId = doc.id;\n      return db.collection('comments').orderBy('createdAt', 'desc').where('postId', '==', id).get();\n    }).then(data => {\n      postData.comments = [];\n      data.forEach(doc => {\n        postData.comments.push(doc.data());\n      });\n      return db.collection('likes').where('postId', '==', id).get();\n    }).then(data => {\n      postData.likes = [];\n      data.forEach(doc => {\n        postData.likes.push(doc.data());\n      });\n      dispatch(getSpecificPostData(postData));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //comment on post\n\nexport const commentOnPost = (newComment, postId) => {\n  return dispatch => {\n    db.doc(`/posts/${postId}`).get().then(doc => {\n      if (!doc.exists) {\n        console.log('Post not found');\n      }\n\n      return doc.ref.update({\n        commentCount: doc.data().commentCount + 1\n      });\n    }).then(() => {\n      return db.collection('comments').add(newComment);\n    }).then(doc => {\n      console.log('new comment added with id: ', doc.id);\n      db.doc(`/comments/${doc.id}`).get();\n    }).then(doc => {\n      dispatch(createNewComment(doc.data()));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //like on post\n\nexport const likePost = (postId, handle) => {\n  return dispatch => {\n    const likeDocument = db.collection('likes').where('userHandle', '==', handle).where('postId', '==', postId).limit(1);\n    const postDocument = db.doc(`/posts/${postId}`);\n    let postData;\n    postDocument.get().then(doc => {\n      if (doc.exists) {\n        postData = doc.data();\n        postData.postId = doc.id;\n        return likeDocument.get();\n      } else {\n        console.log('post not found');\n      }\n    }).then(data => {\n      if (data.empty) {\n        return db.collection('likes').add({\n          postId: postId,\n          userHandle: handle\n        }).then(() => {\n          postData.likeCount++;\n          return postDocument.update({\n            likeCount: postData.likeCount\n          });\n        }).then(() => {\n          dispatch(likePostAction(postData));\n        });\n      } else {\n        console.log('Post already liked');\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; //unlike post\n\nexport const unlikePost = (postId, handle) => {\n  return dispatch => {\n    const likeDocument = db.collection('likes').where('userHandle', '==', handle).where('postId', '==', postId).limit(1);\n    const postDocument = db.doc(`/posts/${postId}`);\n    let postData;\n    postDocument.get().then(doc => {\n      if (doc.exists) {\n        postData = doc.data();\n        postData.postId = doc.id;\n        return likeDocument.get();\n      } else {\n        console.log('post not found');\n      }\n    }).then(data => {\n      if (data.empty) {\n        console.log('post not liked');\n      } else {\n        return db.doc(`/likes/${data.docs[0].id}`).delete().then(() => {\n          postData.likeCount--;\n          return postDocument.update({\n            likeCount: postData.likeCount\n          });\n        }).then(() => {\n          dispatch(unlikePostAction(postData));\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["F:/react/react-redux/social-app/src/actions/dataActions.js"],"names":["firebase","db","GET_POSTS","CREATE_POST","GET_SPECIFIC_POST","CREATE_NEW_COMMENT","LIKE_POST","UNLIKE_POST","getPosts","data","type","createNewPost","post","getSpecificPostData","createNewComment","comment","likePostAction","unlikePostAction","handleInitialData","dispatch","getState","getFirebase","getFirestore","firestore","id","posts","collection","orderBy","get","then","querySnapshot","forEach","doc","LOAD","catch","err","console","log","createPost","newPost","history","add","newPostData","push","getSpecificPost","postData","exists","postId","where","comments","likes","commentOnPost","newComment","ref","update","commentCount","likePost","handle","likeDocument","limit","postDocument","empty","userHandle","likeCount","unlikePost","docs","delete"],"mappings":"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","sourcesContent":["\r\nimport firebase, { db } from '../firebase/firebase';\r\nimport {GET_POSTS, CREATE_POST, GET_SPECIFIC_POST, CREATE_NEW_COMMENT, LIKE_POST, UNLIKE_POST} from '../actionConstants'\r\nimport 'firebase/firestore';\r\n\r\nfunction getPosts(data){\r\n  return{\r\n    type: GET_POSTS,\r\n    data\r\n  }\r\n}\r\nfunction createNewPost(post){\r\n  return{\r\n    type: CREATE_POST,\r\n    data: post\r\n  }\r\n}\r\nfunction getSpecificPostData(data){\r\n  return{\r\n    type: GET_SPECIFIC_POST,\r\n    data\r\n  }\r\n}\r\nfunction createNewComment(comment){\r\n  return{\r\n    type: CREATE_NEW_COMMENT,\r\n    data: comment\r\n  }\r\n}\r\nfunction likePostAction(data){\r\n  return{\r\n    type: LIKE_POST,\r\n    data\r\n  }\r\n}\r\nfunction unlikePostAction(data){\r\n  return{\r\n    type: UNLIKE_POST,\r\n    data\r\n  }\r\n}\r\nexport const handleInitialData=()=>{\r\n  return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n    const firebase=getFirebase();\r\n    const firestore=getFirebase().firestore()\r\n    let id;\r\n    let posts={}\r\n    db.collection(\"posts\").orderBy('createdAt', 'desc').get()\r\n    .then((querySnapshot) => {\r\n      querySnapshot.forEach((doc) =>{\r\n      id=doc.id;\r\n      posts[id]=doc.data();\r\n       });\r\n      dispatch({ type: LOAD}) \r\n      dispatch(getPosts(posts))\r\n    })\r\n    .catch(err=>{\r\n      console.log(err)\r\n    })\r\n  }\r\n}\r\n//create post\r\nexport const createPost=(newPost, history)=>{\r\n  return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n    db.collection(\"posts\").add(newPost)\r\n    .then(doc=>{\r\n      console.log('document written successfully with id: ',doc.id )\r\n      db.doc(`/posts/${doc.id}`).get()\r\n      .then(doc=>{\r\n        let newPostData={}\r\n        newPostData=doc.data()\r\n        newPostData.id=doc.id\r\n        dispatch(createNewPost(newPostData))\r\n        history.push('/')\r\n      })\r\n      .catch(err=>{\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n}\r\n//ge specific post\r\nexport const getSpecificPost=(id)=>{\r\n  return (dispatch, {getFirebase, getFirestore})=>{\r\n    let postData = {};\r\n    db.doc(`/posts/${id}`).get()\r\n    .then((doc) => {\r\n    if (!doc.exists) {\r\n        console.log('Document not existed')\r\n    }\r\n    postData = doc.data();\r\n    postData.postId = doc.id;\r\n    return db.collection('comments').orderBy('createdAt', 'desc').where('postId', '==', id).get();\r\n    })\r\n    .then((data) => {\r\n        postData.comments = [];\r\n        data.forEach((doc) => {\r\n            postData.comments.push(doc.data());\r\n        });\r\n        return db.collection('likes').where('postId', '==', id).get();\r\n    })\r\n    .then((data) => {\r\n        postData.likes = [];\r\n        data.forEach((doc) => {\r\n            postData.likes.push(doc.data());\r\n        });\r\n        dispatch(getSpecificPostData(postData))\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });\r\n  }\r\n}\r\n//comment on post\r\nexport const commentOnPost=(newComment, postId)=>{\r\n  return (dispatch)=>{\r\n    db.doc(`/posts/${postId}`).get()\r\n    .then((doc)=>{\r\n      if(!doc.exists){\r\n          console.log('Post not found');\r\n      }\r\n      return doc.ref.update({ commentCount: doc.data().commentCount+1});\r\n    })\r\n    .then(()=>{\r\n      return db.collection('comments').add(newComment);\r\n    })\r\n    .then((doc)=>{\r\n      console.log('new comment added with id: ', doc.id)\r\n      db.doc(`/comments/${doc.id}`).get()\r\n    })\r\n    .then(doc=>{\r\n      dispatch(createNewComment(doc.data()))\r\n    })\r\n    .catch((err)=>{\r\n      console.log(err);\r\n    })\r\n  }\r\n}\r\n//like on post\r\nexport const likePost = (postId, handle) => {\r\n  return (dispatch)=>{\r\n    const likeDocument = db.collection('likes').where('userHandle', '==', handle).where('postId', '==', postId).limit(1);\r\n    const postDocument = db.doc(`/posts/${postId}`);\r\n    let postData;\r\n\r\n    postDocument.get()\r\n    .then((doc) => {\r\n        if (doc.exists) {\r\n            postData = doc.data();\r\n            postData.postId = doc.id;\r\n            return likeDocument.get();\r\n        } else {\r\n            console.log('post not found');\r\n        }\r\n    })\r\n    .then((data) => {\r\n        if (data.empty) {\r\n            return db.collection('likes').add({\r\n                postId: postId,\r\n                userHandle: handle\r\n            })\r\n            .then(() => {\r\n                postData.likeCount++;\r\n                return postDocument.update({ likeCount: postData.likeCount });\r\n            })\r\n            .then(() => {\r\n                dispatch(likePostAction(postData))\r\n            });\r\n        } else {\r\n            console.log('Post already liked')\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });\r\n  }\r\n};\r\n//unlike post\r\nexport const unlikePost = (postId, handle) => {\r\n  return (dispatch)=>{\r\n    const likeDocument = db.collection('likes').where('userHandle', '==', handle).where('postId', '==', postId).limit(1);\r\n    const postDocument = db.doc(`/posts/${postId}`);\r\n    let postData;\r\n\r\n    postDocument.get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          postData = doc.data();\r\n          postData.postId = doc.id;\r\n          return likeDocument.get();\r\n        } else {\r\n            console.log('post not found');\r\n        }\r\n      })\r\n      .then((data) => {\r\n        if (data.empty) {\r\n          console.log('post not liked');\r\n        } else {\r\n          return db.doc(`/likes/${data.docs[0].id}`).delete()\r\n            .then(() => {\r\n              postData.likeCount--;\r\n              return postDocument.update({ likeCount: postData.likeCount });\r\n            })\r\n            .then(() => {\r\n              dispatch(unlikePostAction(postData))\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}