{"ast":null,"code":"var _jsxFileName = \"F:\\\\react\\\\react-redux\\\\social-app\\\\src\\\\components\\\\userProfile.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Avatar from '@material-ui/core/Avatar';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getSpecificUser } from '../actions/authUserActions';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    width: 500,\n    height: 450\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)'\n  },\n  avatar: {\n    marginLeft: \"100%\",\n    marginTop: \"8%\",\n    height: 100,\n    width: 100\n  },\n  handle: {\n    marginTop: '8%',\n    fontWeight: '500',\n    marginLeft: '-25%',\n    fontSize: '20px'\n  },\n  intro: {\n    marginTop: '3%'\n  }\n}));\n\nfunction UserProfile(props) {\n  const classes = useStyles();\n  useEffect(() => {\n    props.dispatch(getSpecificUser(props.handle));\n    console.log(props.user);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timeline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, Object.keys(props.user).length === 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Loading user...\") : /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 4,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    alt: props.user.handle,\n    src: props.user.imageUrl,\n    className: classes.avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 8,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    color: \"textSecondary\",\n    component: \"p\",\n    className: classes.handle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }\n  }, props.user.handle), props.user.bio && /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    color: \"textPrimary\",\n    component: \"p\",\n    className: classes.intro,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 33\n    }\n  }, props.user.bio))), props.user.posts && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    cellHeight: 200,\n    className: classes.gridList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }\n  }, props.user.posts.map(post => /*#__PURE__*/React.createElement(GridListTile, {\n    key: post.postId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: post.postImage,\n    alt: post.postId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(GridListTileBar, {\n    title: post.body,\n    subtitle: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 55\n      }\n    }, \"by: \", post.userHandle),\n    actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": `info about post`,\n      className: classes.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(InfoIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 49\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 41\n    }\n  })))))));\n}\n\nconst mapStateToProps = ({\n  user\n}) => {\n  return {\n    user: user.specificUser\n  };\n};\n\nexport default connect(mapStateToProps)(UserProfile);","map":{"version":3,"sources":["F:/react/react-redux/social-app/src/components/userProfile.js"],"names":["React","useEffect","connect","Avatar","Grid","Typography","GridList","GridListTile","GridListTileBar","ListSubheader","IconButton","InfoIcon","makeStyles","getSpecificUser","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","avatar","marginLeft","marginTop","handle","fontWeight","fontSize","intro","UserProfile","props","classes","dispatch","console","log","user","Object","keys","length","imageUrl","bio","posts","map","post","postId","postImage","body","userHandle","mapStateToProps","specificUser"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {getSpecificUser} from '../actions/authUserActions'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n      },\r\n      gridList: {\r\n        width: 500,\r\n        height: 450,\r\n      },\r\n      icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n      },\r\n    avatar: {\r\n        marginLeft: \"100%\",\r\n        marginTop: \"8%\",\r\n        height: 100,\r\n        width: 100\r\n    },\r\n    handle: { \r\n        marginTop:'8%',\r\n        fontWeight: '500',\r\n        marginLeft: '-25%',\r\n        fontSize: '20px'\r\n    },\r\n    intro: {\r\n        marginTop: '3%',\r\n    }\r\n}));\r\n\r\nfunction UserProfile(props) {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        props.dispatch(getSpecificUser(props.handle))\r\n        console.log(props.user)        \r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"timeline\">\r\n            { Object.keys(props.user).length===0\r\n            ? ( <p>Loading user...</p> )\r\n            : (\r\n                <Grid container spacing={0} >\r\n                    <Grid item sm={4} xs={12}>\r\n                        <Avatar\r\n                            alt={props.user.handle}\r\n                            src={props.user.imageUrl}\r\n                            className={classes.avatar}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item sm={8} xs={12}>\r\n                        <div>\r\n                            <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\" className={classes.handle}>\r\n                                {props.user.handle}\r\n                            </Typography>\r\n                            {props.user.bio && (\r\n                                <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\" className={classes.intro}>\r\n                                    {props.user.bio}\r\n                                </Typography>\r\n                            )}\r\n                        </div>\r\n                    </Grid>\r\n                    {props.user.posts && (\r\n                        <div className={classes.root}>\r\n                            <GridList cellHeight={200} className={classes.gridList}>\r\n                                \r\n                                {props.user.posts.map((post)=>(\r\n                                    <GridListTile key={post.postId}>\r\n                                        <img src={post.postImage} alt={post.postId} />\r\n                                        <GridListTileBar\r\n                                            title={post.body}\r\n                                            subtitle={<span>by: {post.userHandle}</span>}\r\n                                            actionIcon={\r\n                                                <IconButton aria-label={`info about post`} className={classes.icon}>\r\n                                                <InfoIcon />\r\n                                                </IconButton>\r\n                                            }\r\n                                        />\r\n                                    </GridListTile>\r\n                                ))}\r\n                            </GridList>\r\n                        </div>\r\n                    )}\r\n                </Grid>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({user})=>{\r\n    return{\r\n        user: user.specificUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserProfile)\r\n"]},"metadata":{},"sourceType":"module"}