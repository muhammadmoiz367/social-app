{"ast":null,"code":"import firebase, { db, firebaseConfig } from '../firebase/firebase';\nimport { signUpValidate, loginValidate } from '../utils/validators';\nimport { SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_USER, SET_UNAUTHENTICATED } from '../actionConstants';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nfunction loadingUi() {\n  return {\n    type: LOADING_UI\n  };\n}\n\nfunction clearErrors() {\n  return {\n    type: CLEAR_ERRORS\n  };\n}\n\nfunction setUser(data) {\n  return {\n    type: SET_USER,\n    data\n  };\n}\n\nfunction setErrors(errors) {\n  return {\n    type: SET_ERRORS,\n    errors\n  };\n}\n\nfunction setUnauthenticated() {\n  return {\n    type: SET_UNAUTHENTICATED\n  };\n}\n\nexport const signIn = credentials => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirebase().firestore();\n    dispatch(loadingUi());\n    const {\n      isValid,\n      errors\n    } = loginValidate(credentials);\n\n    if (!isValid) {\n      dispatch(setErrors(errors));\n    }\n\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(res => {\n      let token = `Bearer ${res.user.refreshToken}`;\n      localStorage.setItem('FBIdToken', token);\n      dispatch(clearErrors());\n      db.collection(\"users\").where('uid', '==', res.user.uid).get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          dispatch(setUser(doc.data()));\n        });\n      });\n      window.location.href = \"/\";\n    }).catch(err => {\n      console.log(err);\n\n      if (err.code === \"auth/user-not-found\") {\n        dispatch(setErrors({\n          general: 'User not found'\n        }));\n      }\n\n      if (err.code === 'auth/wrong-password') {\n        dispatch(setErrors({\n          general: 'Wrong password'\n        }));\n      }\n    });\n  };\n};\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirebase().firestore();\n    dispatch(loadingUi());\n    const {\n      isValid,\n      errors\n    } = signUpValidate(newUser);\n\n    if (!isValid) {\n      dispatch(setErrors(errors));\n    }\n\n    let uid;\n    const noImage = 'no-image.png';\n    db.collection(\"users\").doc(newUser.userHandle).get().then(doc => {\n      if (doc.exists) {\n        console.log('this handle is already taken');\n        dispatch(setErrors({\n          general: 'This handle is already taken'\n        }));\n      } else {\n        return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);\n      }\n    }).then(data => {\n      let token = `Bearer ${data.user.refreshToken}`;\n      localStorage.setItem('FBIdToken', token);\n      uid = data.user.uid;\n      const userCredentials = {\n        handle: newUser.userHandle,\n        email: newUser.email,\n        createdAt: new Date().toISOString(),\n        imageUrl: `https://firebasestorage.googleapis.com/v0/b/${firebaseConfig.storageBucket}/o/${noImage}?alt=media`,\n        uid\n      };\n      return db.doc(`/users/${newUser.userHandle}`).set(userCredentials);\n    }).then(() => {\n      dispatch(clearErrors());\n      db.collection(\"users\").where('uid', '==', uid).get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          dispatch(setUser(doc.data()));\n        });\n      });\n    }).catch(err => {\n      if (err.code === 'auth/email-already-in-use') {\n        dispatch(setErrors({\n          general: 'Email already in use'\n        }));\n      }\n    });\n  };\n};\nexport const signOut = () => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch(setUnauthenticated());\n    }).catch(err => {\n      dispatch(signoutError(err));\n    });\n  };\n};","map":{"version":3,"sources":["E:/react/react-redux/social-app/src/actions/authUserActions.js"],"names":["firebase","db","firebaseConfig","signUpValidate","loginValidate","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_USER","SET_UNAUTHENTICATED","loadingUi","type","clearErrors","setUser","data","setErrors","errors","setUnauthenticated","signIn","credentials","dispatch","getState","getFirebase","getFirestore","firestore","isValid","auth","signInWithEmailAndPassword","email","password","then","res","token","user","refreshToken","localStorage","setItem","collection","where","uid","get","querySnapshot","forEach","doc","window","location","href","catch","err","console","log","code","general","signUp","newUser","noImage","userHandle","exists","createUserWithEmailAndPassword","userCredentials","handle","createdAt","Date","toISOString","imageUrl","storageBucket","set","signOut","signoutError"],"mappings":"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","sourcesContent":["import firebase, { db, firebaseConfig } from '../firebase/firebase';\r\nimport {signUpValidate, loginValidate} from '../utils/validators';\r\n\r\nimport {\r\n    SET_ERRORS,\r\n    CLEAR_ERRORS,\r\n    LOADING_UI,\r\n    SET_USER,\r\n    SET_UNAUTHENTICATED\r\n} from '../actionConstants';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nfunction loadingUi(){\r\n    return{\r\n        type: LOADING_UI\r\n    }\r\n}\r\nfunction clearErrors(){\r\n    return{\r\n        type: CLEAR_ERRORS\r\n    }\r\n}\r\nfunction setUser(data){\r\n    return{\r\n        type: SET_USER,\r\n        data\r\n    }\r\n}\r\nfunction setErrors(errors){\r\n    return{\r\n        type: SET_ERRORS,\r\n        errors\r\n    }\r\n}\r\nfunction setUnauthenticated(){\r\n    return{\r\n        type: SET_UNAUTHENTICATED\r\n    }\r\n}\r\n\r\nexport const signIn=(credentials)=>{\r\n    return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n        const firebase=getFirebase();\r\n        const firestore=getFirebase().firestore()\r\n        dispatch(loadingUi())\r\n        const {isValid, errors} = loginValidate(credentials)\r\n        if(!isValid){\r\n            dispatch(setErrors(errors))\r\n        }\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        )\r\n        .then((res)=>{\r\n            let token=`Bearer ${res.user.refreshToken}`\r\n            localStorage.setItem('FBIdToken',token)\r\n            dispatch(clearErrors())\r\n            db.collection(\"users\").where('uid','==',res.user.uid).get()\r\n            .then((querySnapshot) => {\r\n                querySnapshot.forEach((doc) =>{\r\n                    dispatch(setUser(doc.data()))\r\n                });\r\n            });\r\n            window.location.href=\"/\"\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n            if(err.code===\"auth/user-not-found\"){\r\n                dispatch(setErrors({general: 'User not found'}))\r\n            }\r\n            if(err.code === 'auth/wrong-password'){\r\n                dispatch(setErrors({general: 'Wrong password'}))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const signUp=(newUser)=>{\r\n    return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n        const firebase=getFirebase();\r\n        const firestore=getFirebase().firestore();\r\n        dispatch(loadingUi())\r\n        const {isValid, errors} = signUpValidate(newUser)\r\n        if(!isValid){\r\n            dispatch(setErrors(errors))\r\n        }\r\n        let uid;\r\n        const noImage='no-image.png';\r\n        db.collection(\"users\").doc(newUser.userHandle).get()\r\n        .then((doc)=>{\r\n            if(doc.exists){\r\n                console.log('this handle is already taken')\r\n                dispatch(setErrors({general: 'This handle is already taken'}))\r\n            }\r\n            else{\r\n                return firebase.auth().createUserWithEmailAndPassword(newUser.email,newUser.password)\r\n            }\r\n        })\r\n        .then(data=>{\r\n            let token=`Bearer ${data.user.refreshToken}`\r\n            localStorage.setItem('FBIdToken',token)\r\n            uid=data.user.uid;\r\n            const userCredentials={\r\n                handle:newUser.userHandle,\r\n                email:newUser.email,\r\n                createdAt:new Date().toISOString(),\r\n                imageUrl:`https://firebasestorage.googleapis.com/v0/b/${firebaseConfig.storageBucket}/o/${noImage}?alt=media`,\r\n                uid\r\n            }\r\n            return db.doc(`/users/${newUser.userHandle}`).set(userCredentials)\r\n        })\r\n        .then(()=>{\r\n            dispatch(clearErrors())\r\n            db.collection(\"users\").where('uid','==',uid).get()\r\n            .then((querySnapshot) => {\r\n                querySnapshot.forEach((doc) =>{\r\n                    dispatch(setUser(doc.data()))\r\n                });\r\n            });\r\n        })\r\n        .catch((err)=>{\r\n            if(err.code === 'auth/email-already-in-use'){\r\n                dispatch(setErrors({general: 'Email already in use'}))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const signOut=()=>{\r\n    return (dispatch,getState,{getFirebase})=>{\r\n        const firebase=getFirebase();\r\n        firebase.auth().signOut()\r\n        .then(()=>{\r\n            dispatch(setUnauthenticated())\r\n        })\r\n        .catch((err)=>{\r\n            dispatch(signoutError(err))\r\n        })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}