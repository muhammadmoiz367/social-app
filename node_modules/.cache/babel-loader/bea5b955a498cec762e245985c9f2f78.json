{"ast":null,"code":"import firebase, { db, firebaseConfig } from '../firebase/firebase';\nimport { signUpValidate, loginValidate } from '../utils/validators';\nimport { LOGIN_SUCCESS, LOGIN_ERROR, SIGNOUT_SUCCESS, SIGNOUT_ERROR, SIGNUP_SUCCESS, SIGNUP_ERROR, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_USER } from '../actionConstants';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nfunction loginSuccess() {\n  return {\n    type: LOGIN_SUCCESS\n  };\n}\n\nfunction loginError(err) {\n  return {\n    type: LOGIN_ERROR,\n    err\n  };\n}\n\nfunction signoutSuccess() {\n  return {\n    type: SIGNOUT_SUCCESS\n  };\n}\n\nfunction signoutError(err) {\n  return {\n    type: SIGNOUT_ERROR,\n    err\n  };\n}\n\nfunction signupSuccess() {\n  return {\n    type: SIGNUP_SUCCESS\n  };\n}\n\nfunction signupError(err) {\n  return {\n    type: SIGNUP_ERROR,\n    err\n  };\n}\n\nfunction setUser(data) {\n  return {\n    type: SET_USER,\n    data\n  };\n}\n\nfunction setErrors(errors) {\n  return {\n    type: SET_ERRORS,\n    errors: erro\n  };\n}\n\nexport const signIn = credentials => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    dispatch({\n      type: LOADING_UI\n    });\n    const {\n      isValid,\n      errors\n    } = loginValidate(credentials);\n\n    if (!isValid) {\n      console.log(errors);\n      dispatch();\n    }\n\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(res => {\n      dispatch({\n        type: CLEAR_ERRORS\n      });\n      db.collection(\"users\").where('uid', '==', res.user.uid).get().then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          dispatch(setUser(doc.data()));\n        });\n      });\n    }).catch(err => {\n      dispatch(loginError(errors));\n    });\n  };\n};\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirebase().firestore();\n    const {\n      isValid,\n      errors\n    } = signUpValidate(newUser);\n\n    if (!isValid) {\n      console.log(errors);\n    }\n\n    let uid;\n    const noImage = 'no-image.png';\n    db.collection(\"users\").doc(newUser.userHandle).get().then(doc => {\n      if (doc.exists) {\n        console.log('this handle is already taken');\n      } else {\n        return firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password);\n      }\n    }).then(data => {\n      uid = data.user.uid;\n      console.log(uid);\n      const userCredentials = {\n        handle: newUser.userHandle,\n        email: newUser.email,\n        createdAt: new Date().toISOString(),\n        imageUrl: `https://firebasestorage.googleapis.com/v0/b/${firebaseConfig.storageBucket}/o/${noImage}?alt=media`,\n        uid\n      };\n      return db.doc(`/users/${newUser.userHandle}`).set(userCredentials);\n    }).then(() => {\n      console.log(\"User created successfully\");\n      dispatch(signupSuccess());\n    }).catch(err => {\n      dispatch(signupError(err));\n\n      if (err.code === 'auth/email-already-in-use') {\n        console.log('Email already in use');\n      }\n    });\n  };\n};\n/*export const signOut=()=>{\r\n    return (dispatch,getState,{getFirebase})=>{\r\n        const firebase=getFirebase();\r\n        firebase.auth().signOut()\r\n        .then(()=>{\r\n            dispatch(setProgressBar('OPEN'))\r\n        }).then(()=>{\r\n            setTimeout(()=>{\r\n                dispatch(setProgressBar('CLOSE'))\r\n            },2000)\r\n        })\r\n        .catch((err)=>{\r\n            dispatch(signoutError(err))\r\n        })\r\n    }\r\n}\r\n*/","map":{"version":3,"sources":["E:/react/react-redux/social-app/src/actions/authUserActions.js"],"names":["firebase","db","firebaseConfig","signUpValidate","loginValidate","LOGIN_SUCCESS","LOGIN_ERROR","SIGNOUT_SUCCESS","SIGNOUT_ERROR","SIGNUP_SUCCESS","SIGNUP_ERROR","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_USER","loginSuccess","type","loginError","err","signoutSuccess","signoutError","signupSuccess","signupError","setUser","data","setErrors","errors","erro","signIn","credentials","dispatch","getState","getFirebase","getFirestore","firestore","isValid","console","log","auth","signInWithEmailAndPassword","email","password","then","res","collection","where","user","uid","get","querySnapshot","forEach","doc","catch","signUp","newUser","noImage","userHandle","exists","createUserWithEmailAndPassword","userCredentials","handle","createdAt","Date","toISOString","imageUrl","storageBucket","set","code"],"mappings":"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","sourcesContent":["import firebase, { db, firebaseConfig } from '../firebase/firebase';\r\nimport {signUpValidate, loginValidate} from '../utils/validators';\r\n\r\nimport {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_ERROR,\r\n    SIGNOUT_SUCCESS,\r\n    SIGNOUT_ERROR,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_ERROR,\r\n    SET_ERRORS,\r\n    CLEAR_ERRORS,\r\n    LOADING_UI,\r\n    SET_USER\r\n} from '../actionConstants';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nfunction loginSuccess(){\r\n    return{\r\n        type:LOGIN_SUCCESS\r\n    }\r\n}\r\nfunction loginError(err){\r\n    return{\r\n        type:LOGIN_ERROR,\r\n        err\r\n    }\r\n}\r\nfunction signoutSuccess(){\r\n    return{\r\n        type:SIGNOUT_SUCCESS\r\n    }\r\n}\r\nfunction signoutError(err){\r\n    return{\r\n        type:SIGNOUT_ERROR,\r\n        err\r\n    }\r\n}\r\nfunction signupSuccess(){\r\n    return{\r\n        type:SIGNUP_SUCCESS\r\n    }\r\n}\r\nfunction signupError(err){\r\n    return{\r\n        type:SIGNUP_ERROR,\r\n        err\r\n    }\r\n}\r\nfunction setUser(data){\r\n    return{\r\n        type: SET_USER,\r\n        data\r\n    }\r\n}\r\nfunction setErrors(errors){\r\n    return{\r\n        type: SET_ERRORS,\r\n        errors: erro\r\n    }\r\n}\r\n\r\nexport const signIn=(credentials)=>{\r\n    return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n        const firebase=getFirebase();\r\n        const firestore=getFirestore()\r\n        dispatch({ type: LOADING_UI })\r\n        const {isValid, errors} = loginValidate(credentials)\r\n        if(!isValid){\r\n            console.log(errors)\r\n            dispatch()\r\n        }\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        )\r\n        .then((res)=>{\r\n            dispatch({ type: CLEAR_ERRORS })\r\n            db.collection(\"users\").where('uid','==',res.user.uid).get()\r\n            .then((querySnapshot) => {\r\n                querySnapshot.forEach((doc) =>{\r\n                    dispatch(setUser(doc.data()))\r\n                });\r\n            });\r\n        })\r\n        .catch((err)=>{\r\n            dispatch(loginError(errors))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const signUp=(newUser)=>{\r\n    return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n        const firebase=getFirebase();\r\n        const firestore=getFirebase().firestore();\r\n        const {isValid, errors} = signUpValidate(newUser)\r\n        if(!isValid){\r\n            console.log(errors)\r\n        }\r\n        let uid;\r\n        const noImage='no-image.png';\r\n        db.collection(\"users\").doc(newUser.userHandle).get()\r\n        .then((doc)=>{\r\n            if(doc.exists){\r\n                console.log('this handle is already taken')\r\n            }\r\n            else{\r\n                return firebase.auth().createUserWithEmailAndPassword(newUser.email,newUser.password)\r\n            }\r\n        })\r\n        .then(data=>{\r\n            uid=data.user.uid;\r\n            console.log(uid)\r\n            const userCredentials={\r\n                handle:newUser.userHandle,\r\n                email:newUser.email,\r\n                createdAt:new Date().toISOString(),\r\n                imageUrl:`https://firebasestorage.googleapis.com/v0/b/${firebaseConfig.storageBucket}/o/${noImage}?alt=media`,\r\n                uid\r\n            }\r\n            return db.doc(`/users/${newUser.userHandle}`).set(userCredentials)\r\n        })\r\n        .then(()=>{\r\n            console.log(\"User created successfully\")\r\n            dispatch(signupSuccess())\r\n        })\r\n        .catch((err)=>{\r\n            dispatch(signupError(err))\r\n            if(err.code === 'auth/email-already-in-use'){\r\n                console.log('Email already in use')\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/*export const signOut=()=>{\r\n    return (dispatch,getState,{getFirebase})=>{\r\n        const firebase=getFirebase();\r\n        firebase.auth().signOut()\r\n        .then(()=>{\r\n            dispatch(setProgressBar('OPEN'))\r\n        }).then(()=>{\r\n            setTimeout(()=>{\r\n                dispatch(setProgressBar('CLOSE'))\r\n            },2000)\r\n        })\r\n        .catch((err)=>{\r\n            dispatch(signoutError(err))\r\n        })\r\n    }\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}