{"ast":null,"code":"import firebase, { db } from '../firebase/firebase';\nimport { GET_POSTS, CREATE_POST, GET_SPECIFIC_POST } from '../actionConstants';\nimport 'firebase/firestore';\n\nfunction getPosts(data) {\n  return {\n    type: GET_POSTS,\n    data\n  };\n}\n\nfunction createNewPost(post) {\n  return {\n    type: CREATE_POST,\n    data: post\n  };\n}\n\nfunction getSpecificPostData(data) {\n  return {\n    type: GET_SPECIFIC_POST,\n    data\n  };\n}\n\nexport const handleInitialData = () => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirebase().firestore();\n    let id;\n    let posts = {};\n    db.collection(\"posts\").orderBy('createdAt', 'desc').get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        id = doc.id;\n        posts[id] = doc.data();\n      });\n      dispatch(getPosts(posts));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const createPost = (newPost, history) => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    db.collection(\"posts\").add(newPost).then(doc => {\n      console.log('document written successfully with id: ', doc.id);\n      db.doc(`/posts/${doc.id}`).get().then(doc => {\n        let newPostData = {};\n        newPostData = doc.data();\n        newPostData.id = doc.id;\n        dispatch(createNewPost(newPostData));\n        history.push('/');\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n};\nexport const getSpecificPost = id => {\n  return (dispatch, {\n    getFirebase,\n    getFirestore\n  }) => {\n    let postData = {};\n    db.doc(`/posts/${id}`).get().then(doc => {\n      if (!doc.exists) {\n        console.log('Document not existed');\n      }\n\n      postData = doc.data();\n      postData.postId = doc.id;\n      return db.collection('comments').orderBy('createdAt', 'desc').where('postId', '==', id).get();\n    }).then(data => {\n      postData.comments = [];\n      data.forEach(doc => {\n        postData.comments.push(doc.data());\n      });\n      return db.collection('likes').where('postId', '==', id).get();\n    }).then(data => {\n      postData.likes = [];\n      data.forEach(doc => {\n        postData.likes.push(doc.data());\n      });\n      dispatch(getSpecificPostData(postData));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const commentOnPost = (newComment, postId) => {\n  return dispatch => {\n    db.doc(`/posts/${postId}`).get().then(doc => {\n      if (!doc.exists) {\n        console.log('Post not found');\n      }\n\n      return doc.update({\n        commentCount: doc.data().commentCount + 1\n      });\n    }).then(() => {\n      return db.collection('comments').add(newComment);\n    }).then(doc => {\n      console.log('new comment added with ');\n    }).catch(err => {\n      console.error(err);\n      res.status(500).json({\n        error: 'Something went wrong'\n      });\n    });\n  };\n};","map":{"version":3,"sources":["E:/react/react-redux/social-app/src/actions/dataActions.js"],"names":["firebase","db","GET_POSTS","CREATE_POST","GET_SPECIFIC_POST","getPosts","data","type","createNewPost","post","getSpecificPostData","handleInitialData","dispatch","getState","getFirebase","getFirestore","firestore","id","posts","collection","orderBy","get","then","querySnapshot","forEach","doc","catch","err","console","log","createPost","newPost","history","add","newPostData","push","getSpecificPost","postData","exists","postId","where","comments","likes","commentOnPost","newComment","update","commentCount","error","res","status","json"],"mappings":"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","sourcesContent":["\r\nimport firebase, { db } from '../firebase/firebase';\r\nimport {GET_POSTS, CREATE_POST, GET_SPECIFIC_POST} from '../actionConstants'\r\nimport 'firebase/firestore';\r\n\r\nfunction getPosts(data){\r\n  return{\r\n    type: GET_POSTS,\r\n    data\r\n  }\r\n}\r\nfunction createNewPost(post){\r\n  return{\r\n    type: CREATE_POST,\r\n    data: post\r\n  }\r\n}\r\nfunction getSpecificPostData(data){\r\n  return{\r\n    type: GET_SPECIFIC_POST,\r\n    data\r\n  }\r\n}\r\n\r\nexport const handleInitialData=()=>{\r\n  return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n    const firebase=getFirebase();\r\n    const firestore=getFirebase().firestore()\r\n    let id;\r\n    let posts={}\r\n    db.collection(\"posts\").orderBy('createdAt', 'desc').get()\r\n    .then((querySnapshot) => {\r\n      querySnapshot.forEach((doc) =>{\r\n      id=doc.id;\r\n      posts[id]=doc.data();\r\n       });\r\n      dispatch(getPosts(posts))\r\n    })\r\n    .catch(err=>{\r\n      console.log(err)\r\n    })\r\n  }\r\n}\r\n\r\nexport const createPost=(newPost, history)=>{\r\n  return (dispatch, getState, {getFirebase, getFirestore})=>{\r\n    db.collection(\"posts\").add(newPost)\r\n    .then(doc=>{\r\n      console.log('document written successfully with id: ',doc.id )\r\n      db.doc(`/posts/${doc.id}`).get()\r\n      .then(doc=>{\r\n        let newPostData={}\r\n        newPostData=doc.data()\r\n        newPostData.id=doc.id\r\n        dispatch(createNewPost(newPostData))\r\n        history.push('/')\r\n      })\r\n      .catch(err=>{\r\n        console.log(err)\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport const getSpecificPost=(id)=>{\r\n  return (dispatch, {getFirebase, getFirestore})=>{\r\n    let postData = {};\r\n    db.doc(`/posts/${id}`).get()\r\n    .then((doc) => {\r\n    if (!doc.exists) {\r\n        console.log('Document not existed')\r\n    }\r\n    postData = doc.data();\r\n    postData.postId = doc.id;\r\n    return db.collection('comments').orderBy('createdAt', 'desc').where('postId', '==', id).get();\r\n    })\r\n    .then((data) => {\r\n        postData.comments = [];\r\n        data.forEach((doc) => {\r\n            postData.comments.push(doc.data());\r\n        });\r\n        return db.collection('likes').where('postId', '==', id).get();\r\n    })\r\n    .then((data) => {\r\n        postData.likes = [];\r\n        data.forEach((doc) => {\r\n            postData.likes.push(doc.data());\r\n        });\r\n        dispatch(getSpecificPostData(postData))\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });\r\n  }\r\n}\r\nexport const commentOnPost=(newComment, postId)=>{\r\n  return (dispatch)=>{\r\n    db.doc(`/posts/${postId}`).get()\r\n      .then((doc)=>{\r\n        if(!doc.exists){\r\n            console.log('Post not found');\r\n        }\r\n        return doc.update({ commentCount: doc.data().commentCount+1});\r\n      })\r\n      .then(()=>{\r\n        return db.collection('comments').add(newComment);\r\n      })\r\n      .then((doc)=>{\r\n        console.log('new comment added with ')\r\n      })\r\n      .catch((err)=>{\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Something went wrong'});\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}